// Generated by CoffeeScript 1.7.1
(function() {
  var $, Backbone, Color, DirectionPainter, GameView, Image, MetaPainter, OrientationPainter, RaphaelPainter, Sprite, View, coordsDecorator, decorate, decorators, helpers, raphael, v, validator, _;

  _ = require('underscore');

  helpers = require('helpers');

  Backbone = require('backbone4000');

  validator = require('validator2-extras');

  v = validator.v;

  decorators = require('decorators');

  decorate = decorators.decorate;

  $ = require('jquery-browserify');

  View = require('./views');

  raphael = require('raphael-browserify');

  coordsDecorator = function(targetf, coords) {
    if (!coords) {
      coords = this.gameview.translate(this.state.point.coords());
    }
    return targetf.call(this, coords);
  };

  GameView = exports.GameView = View.GameView.extend4000({
    initialize: function() {
      var el, sizex, sizey;
      el = this.get('el');
      this.paper = raphael(el.get(0), el.width(), el.height());
      window.paper = this.paper;
      sizey = Math.floor(this.paper.canvas.clientHeight / this.game.get('height'));
      sizex = Math.floor(this.paper.canvas.clientWidth / this.game.get('width'));
      if (sizex > sizey) {
        this.size = sizey;
      } else {
        this.size = sizex;
      }
      this.size_offsetx = Math.round((this.paper.canvas.clientWidth - (this.size * game.get('width'))) / 2);
      return this.size_offsety = Math.round((this.paper.canvas.clientHeight - (this.size * game.get('height'))) / 2);
    },
    translate: function(coords) {
      return [this.size_offsetx + (coords[0] * this.size), this.size_offsety + (coords[1] * this.size)];
    }
  });

  RaphaelPainter = View.Painter.extend4000({
    draw: function(point) {
      return this.render(this.gameview.translate(point.coords()));
    }
  });

  Image = exports.Image = RaphaelPainter.extend4000({
    render: function(coords) {
      var src;
      if (!this.rendering) {
        this.rendering = this.gameview.paper.image(src = this.getpic(), coords[0], coords[1], this.gameview.size, this.gameview.size);
        this.rendering.toFront();
        if (this.rotation) {
          this.rendering.rotate(this.rotation);
        }
        return;
      }
      if (this.rendering.attrs.x !== coords[0] || this.rendering.attrs.y !== coords[1]) {
        this.move(coords);
      }
      return this.rendering.toFront();
    },
    getpic: function() {
      return '/pic/' + (this.pic || this.name) + '.png';
    },
    move: function(coords) {
      return this.rendering.attr({
        x: coords[0],
        y: coords[1]
      });
    },
    images: function() {
      return [this.getpic()];
    },
    remove: function() {
      return this.rendering.remove();
    }
  });

  Sprite = exports.Sprite = Image.extend4000({
    initialize: function() {
      this.frame_pics = [];
      _.times(this.frames, (function(_this) {
        return function(frame) {
          return _this.frame_pics.push('/pic/' + (_this.pic || _this.name) + frame + ".png");
        };
      })(this));
      this.frame = 0;
      if (this.gameview) {
        return this.listenTo(this.gameview, 'tick', (function(_this) {
          return function() {
            return _this.tick();
          };
        })(this));
      }
    },
    getpic: function() {
      return this.frame_pics[this.frame];
    },
    remove: function() {
      this.stopListening();
      return Image.prototype.remove.call(this);
    },
    tick: function() {
      if (!this.rendering) {
        return;
      }
      if (this.frame > this.frame_pics.length - 1) {
        if (this.once) {
          this.stopListening();
          return;
        }
        this.frame = 0;
      }
      this.rendering.attr({
        src: this.getpic()
      });
      return this.frame++;
    },
    images: function() {
      return this.frame_pics;
    }
  });

  Color = exports.Color = RaphaelPainter.extend4000({
    render: decorate(coordsDecorator, function(coords) {
      return this.rendering = this.gameview.paper.rect(coords[0], coords[1], this.gameview.size, this.gameview.size).attr({
        'opacity': .7,
        'stroke-width': 1,
        stroke: this.color,
        fill: this.color
      });
    }),
    move: decorate(coordsDecorator, function(coords) {
      return this.rendering.attr({
        x: coords[0],
        y: coords[1]
      });
    }),
    remove: function() {
      return this.rendering.remove();
    }
  });

  MetaPainter = exports.MetaPainter = RaphaelPainter.extend4000({
    render: function(coords) {
      var cls;
      if (!this.repr) {
        cls = this.decideRepr();
        this.repr = new cls({
          gameview: this.gameview,
          state: this.state
        });
      }
      return this.repr.render(coords);
    },
    remove: function() {
      return this.repr.remove();
    },
    decideRepr: function() {
      throw 'override me';
    }
  });

  DirectionPainter = exports.DirectionPainter = MetaPainter.extend4000({
    decideRepr: function() {
      return this.reprs[this.state.get('direction').string()];
    }
  });

  OrientationPainter = exports.OrientationPainter = MetaPainter.extend4000({
    decideRepr: function() {
      return this.reprs[this.state.get('direction').orientation()];
    }
  });

}).call(this);
