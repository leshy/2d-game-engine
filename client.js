// Generated by LiveScript 1.4.0
(function(){
  var Backbone, Game, h, _, GameClient;
  Backbone = require('backbone4000');
  Game = require('game/models');
  h = require('helpers');
  _ = require('underscore');
  GameClient = exports.GameClient = Backbone.Model.extend4000({
    initialize: function(){
      var this$ = this;
      return this.on('message', function(state, msg){
        return this$.send({
          a: 'msg',
          m: msg,
          id: state.id
        });
      });
    },
    send: function(msg){
      return this.trigger('send', msg);
    },
    receive: function(data){
      return this.applyChanges(data.changes);
    },
    applyChanges: function(changes){
      var this$ = this;
      return _.map(changes, function(change){
        return this$.applyChange(change);
      });
    },
    applyChange: function(change){
      var attrs, point, state, ref$, ref1$;
      if (change.a === 'set') {
        attrs = {
          id: change.id
        };
        if (change.o) {
          attrs = _.extend(attrs, change.o);
        }
        point = this.point(change.p);
        point.push(state = new this.state[change.s](attrs));
      }
      switch (change.a) {
      case 'del':
        return (ref$ = this.byid[change.id]) != null ? ref$.remove() : void 8;
      case 'move':
        state = this.byid[change.id];
        if (state != null && state.nomove) {} else {
          return state != null ? state.move(this.point(change.p)) : void 8;
        }
        break;
      case 'msg':
        return (ref1$ = this.byid[change.id]) != null ? ref1$.trigger('message', change.m) : void 8;
      case 'end':
        return h.wait(50, this.end(change.winner));
      }
    },
    nextid: function(state){
      return "c" + this.stateid++;
    }
  });
}).call(this);
