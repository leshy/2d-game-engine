// Generated by LiveScript 1.4.0
(function(){
  var howler, h, _, Backbone, HowlerSounds;
  howler = require('howler');
  h = require('helpers');
  _ = require('underscore');
  Backbone = require('backbone4000');
  HowlerSounds = exports.HowlerSounds = Backbone.Model.extend4000({
    rootUrl: 'sounds',
    maxDistance: 15,
    event: function(event, state){
      var sounds, ref$, player, ref1$, ref2$, distance, volume, sound;
      if (sounds = (ref$ = this.sounds[state.name]) != null ? ref$[event] : void 8) {
        if (player = state != null ? (ref1$ = state.point) != null ? (ref2$ = ref1$.game) != null ? ref2$.player : void 8 : void 8 : void 8) {
          distance = state.point.distance(player.point);
          console.log('distance is', distance);
          volume = (this.maxDistance - distance) / distance;
          if (volume < 0) {
            volume = 0;
          }
          if (volume > 1) {
            volume = 1;
          }
          console.log('volime is', volume);
        } else {
          volume = 1;
        }
        sound = h.random(sounds);
        sound.volume(volume);
        return sound.play();
      }
    },
    initialize: function(options){
      var this$ = this;
      this.set(options);
      _.extend(this, options);
      if (this.sounds != null) {
        this.sounds = h.dictMap(this.sounds, function(stateEvents, stateName){
          return h.dictMap(stateEvents, function(value, event){
            var soundNames, x;
            soundNames = x = (function(){
              switch (value != null && value.constructor) {
              case Boolean:
                return [stateName + h.capitalize(event)];
              case String:
                return [value];
              case Number:
                return _.times(value, function(n){
                  return stateName + h.capitalize(event) + n;
                });
              case Array:
                return value;
              }
            }());
            return _.map(soundNames, function(soundName){
              var soundPath;
              soundPath = h.path(this$.rootUrl, soundName) + ".ogg";
              return new howler.Howl({
                urls: [soundPath]
              });
            });
          });
        });
      }
      return this.when('game', function(game){
        this$.game = game;
        return _.defer(function(){
          game.on('set', function(state, point){
            return this$.event('set', state);
          });
          return game.on('del', function(state, point){
            return this$.event('del', state);
          });
        });
      });
    }
  });
}).call(this);
