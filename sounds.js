// Generated by LiveScript 1.4.0
(function(){
  var howler, h, _, Backbone, HowlerSounds;
  howler = require('howler');
  h = require('helpers');
  _ = require('underscore');
  Backbone = require('backbone4000');
  HowlerSounds = exports.HowlerSounds = Backbone.Model.extend4000({
    rootUrl: 'sounds',
    initialize: function(options){
      var this$ = this;
      this.set(options);
      _.extend(this, options);
      if (this.sounds != null) {
        this.sounds = h.dictMap(this.sounds, function(stateEvents, stateName){
          return h.dictMap(stateEvents, function(value, event){
            var soundNames, x;
            soundNames = x = (function(){
              switch (value != null && value.constructor) {
              case Boolean:
                return [stateName + h.capitalize(event)];
              case String:
                return [value];
              case Number:
                return _.times(value, function(n){
                  return stateName + h.capitalize(event) + n;
                });
              case Array:
                return value;
              }
            }());
            return _.map(soundNames, function(soundName){
              var soundPath;
              soundPath = h.path(this$.rootUrl, soundName) + ".ogg";
              return new howler.Howl({
                urls: [soundPath]
              });
            });
          });
        });
      }
      return this.when('game', function(game){
        this$.game = game;
        return _.defer(function(){
          game.on('set', function(state, point){
            var sounds, ref$, sound;
            if (sounds = (ref$ = this$.sounds[state.name]) != null ? ref$.set : void 8) {
              sound = h.random(sounds);
              return sound.play();
            }
          });
          game.on('del', function(state, point){
            var sounds, ref$, sound;
            if (sounds = (ref$ = this$.sounds[state.name]) != null ? ref$.del : void 8) {
              sound = h.random(sounds);
              return sound.play();
            }
          });
          game.on('sound', function(state, sound){
            var ref$;
            if (sound = (ref$ = this.sounds[state.name]) != null ? ref$[sound] : void 8) {
              return sound.play();
            }
          });
          this$.music = new howler.Howl({
            urls: ['/sounds/music.mp3']
          });
          return game.once('tick', function(){
            this$.music.play();
            return game.once('end', function(){
              return this$.music.fadeOut(0, 1000, function(){
                return this$.music.stop();
              });
            });
          });
        });
      });
    }
  });
}).call(this);
