// Generated by CoffeeScript 1.8.0
(function() {
  var Game, helpers, _;

  _ = require('underscore');

  helpers = require('helpers');

  Game = require('game/models');

  exports.mover = {
    initialize: function(options) {
      return _.extend(this, {
        coordinates: [0.5, 0.5],
        speed: 0,
        direction: new Game.Direction(0, 0)
      }, options);
    },
    start: function() {
      return this.scheduleMove();
    },
    movementChange: function() {
      if (this.doSubMove) {
        this.unsub();
        this.doSubMove();
        return delete this.doSubMove;
      } else {
        return this.scheduleMove();
      }
    },
    scheduleMove: function() {
      var eta;
      eta = this.boundaryEta(this.direction, this.speed);
      if (eta === Infinity) {
        return;
      }
      return this.unsub = this["in"](Math.ceil(eta), this.doSubMove = this.makeMover());
    },
    makeMover: function(direction, speed) {
      var startTime;
      if (direction == null) {
        direction = this.direction;
      }
      if (speed == null) {
        speed = this.speed;
      }
      startTime = this.point.game.tick;
      return (function(_this) {
        return function() {
          var ticks;
          ticks = _this.point.game.tick - startTime;
          _this.subMove(direction, speed, ticks);
          return _this.scheduleMove();
        };
      })(this);
    },
    boundaryEta: function(direction, speed) {
      var eta;
      eta = helpers.squish(direction.coords(), this.coordinates, (function(_this) {
        return function(direction, coordinate) {
          if (direction > 0) {
            return (1 - coordinate) / speed;
          } else {
            return coordinate / speed;
          }
        };
      })(this));
      return _.reduce(eta, (function(max, x) {
        if (x > max) {
          return x;
        } else {
          return max;
        }
      }), 0);
    },
    subMove: function(direction, speed, time) {
      var movePoint;
      this.coordinates = helpers.squish(direction.coords(), this.coordinates, (function(_this) {
        return function(direction, coordinate) {
          return coordinate += direction * speed * time;
        };
      })(this));
      if ((movePoint = this.point.direction(_.map(this.coordinates, function(c) {
        if (c >= 1) {
          return 1;
        } else if (c <= 0) {
          return -1;
        } else {
          return 0;
        }
      }))) !== this.point) {
        this.coordinates = _.map(this.coordinates, function(c) {
          if (c >= 1) {
            return c - 1;
          } else if (c <= 0) {
            return c + 1;
          } else {
            return c;
          }
        });
        return this.move(movePoint);
      }
    }
  };

}).call(this);
